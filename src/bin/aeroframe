#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Command line program interface
"""

# Authors:
# * Aaron Dettmann

import logging
import argparse

import commonlibs.logger as hlogger

import aeroframe.fileio as io
from aeroframe.analyses.static import StaticAeroelasticity
from aeroframe.data.shared import SharedData

logger = logging.getLogger(__name__)

__prog_name__ = 'aeroframe'


def main():
    """
    Top level procedure
    """

    # ===== Arguments =====
    parser = argparse.ArgumentParser(prog=f'{__prog_name__}')
    subparsers = parser.add_subparsers(help='execution modes', dest='exec_mode')

    # ----- Mode 'run' -----
    sub = subparsers.add_parser('run', help='run an analysis')
    sub.add_argument('filename', metavar='input file', help='input file', type=str)

    group = sub.add_mutually_exclusive_group()
    group.add_argument('-c', '--clean', help='remove old project files', action='store_true')
    group.add_argument('--clean-only', help='clean and exit', action='store_true')

    group = sub.add_mutually_exclusive_group()
    group.add_argument('-v', '--verbose', action='store_true')
    group.add_argument('-d', '--debug', action='store_true')
    group.add_argument('-q', '--quiet', action='store_true')

    # ----- Mode 'init' -----
    sub = subparsers.add_parser('init', help='initialise a project')
    sub.add_argument('-f', '--force', help='overwrite existing files', action='store_true')

    args = parser.parse_args()

    if args.exec_mode == 'run':
        #######################
        # TODO: Move program logic to 'stdrun' module
        #######################

        settings_file = args.filename

        if args.verbose:
            level = 'info'
        elif args.debug:
            level = 'debug'
        elif args.quiet:
            level = 'quiet'
        else:
            level = 'default'

        # ===== Logging =====
        hlogger.init(log_filename="log.txt", level=level)
        logger = logging.getLogger()
        logger.info(hlogger.decorate(f"{__prog_name__}"))

        # ===== Initialise =====
        files = io.FileStructure(settings_file)
        general_settings = io.load_root_settings(files).get('general_settings', {})

        cfd_lib, stru_lib = io.load_wrapper_libs(files)
        cfd_wrapper = cfd_lib.AeroWrapper(files)
        stru_wrapper = stru_lib.StructureWrapper(files)

        #######################
        # shared_data = SharedData()
        # cfd_wrapper.shared_data = shared_data
        # stru_wrapper.shared_data = shared_data
        #######################

        # ===== Clean up before running a new analysis =====
        if args.clean or args.clean_only:
            logger.info("Removing old files...")
            cfd_wrapper.clean()
            stru_wrapper.clean()

            if args.clean_only:
                logger.info("Exiting...")
                return

        # ===== Run the aeroelastic analysis =====
        settings = general_settings.get('static_loop', {})
        static = StaticAeroelasticity(cfd_wrapper, stru_wrapper, **settings)
        static.find_equilibrium()

    elif args.exec_mode == 'init':
        raise NotImplementedError

    else:
        parser.print_help()




if __name__ == '__main__':
    main()
